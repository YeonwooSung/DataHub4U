doctype html
html
    head
        title #{title}
        meta(name='user page', content='width=device-width, initial-scale=1.0')
        link(rel='stylesheet', href='../public/stylesheets/dataPage.css')
        link(rel='stylesheet', href='//cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css')
        script(type='text/javascript', src='../public/javascripts/jquery.min.js')
        script(type='text/javascript', src='../public/javascripts/moment.min.js')
        script(type='text/javascript', src='//cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js')
    body
        script(type="text/javascript" src="https://www.gstatic.com/charts/loader.js")
        script.
            google.charts.load('current', {'packages': ['corechart']});
            google.charts.setOnLoadCallback(initPage);

            var dataset = !{JSON.stringify(data)};

            var weeklyData = undefined;

            var currentClickedElement;

            function prepareDrawing(id,data, num) {
                document.getElementById(currentClickedElement).style.color = 'LightGrey';
                currentClickedElement = id;
                document.getElementById(currentClickedElement).style.color = 'Black';
                drawChart(data, num);
            }

            function draw_5hourData() {
                makeDatePickerInvisible();
                if (dataset.length > 60) {
                    prepareDrawing('5hours', dataset, 60);
                } else if (dataset.length > 0) {
                    prepareDrawing('5hours', dataset, dataset.length);
                } else {
                    alert('No collected data!');
                }
            }

            function draw_12hourData() {
                makeDatePickerInvisible();
                if (dataset.length > 144) {
                    prepareDrawing('12hours', dataset, 144);
                } else if (dataset.length > 0) {
                    prepareDrawing('12hours', dataset, dataset.length);
                } else {
                    alert('No collected data');
                }
            }

            function draw_1dayData() {
                makeDatePickerInvisible();

                if (dataset.length > 0) {
                    prepareDrawing('1day', dataset, dataset.length);
                } else {
                    alert('No collected data!');
                }
            }

            function draw_1weekData() {
                if (weeklyData === undefined) {
                    doAJAXFor1WeekAnd1Month('1week', 'week');
                } else {
                    makeDatePickerInvisible();

                    document.getElementById(currentClickedElement).style.color = 'LightGrey';
                    currentClickedElement = '1week';
                    document.getElementById(currentClickedElement).style.color = 'Black';

                    drawChart(weeklyData, weeklyData.length);
                }
            }

            function draw_1monthData() {
                doAJAXFor1WeekAnd1Month('1month', 'month');
            }

            function doAJAXFor1WeekAnd1Month(id, range) {
                makeDatePickerInvisible();

                document.getElementById(currentClickedElement).style.color = 'LightGrey';
                currentClickedElement = id;
                document.getElementById(currentClickedElement).style.color = 'Black';

                let xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === xhr.DONE) {
                        if (xhr.status === 200) {
                            let tempData = JSON.parse(xhr.response);

                            if (tempData.length > 0) {
                                if (id === '1week') {
                                    weeklyData = tempData;
                                }

                                drawChart(tempData, tempData.length);
                            } else {
                                alert(`No collected data: ${id}`);
                            }
                        } else {
                            alert('Failed to get the data from the server!');
                        }
                    }
                }

                let deviceNum = window.location.href.split('deviceNum=')[1].split('&')[0];

                xhr.open('GET', `/data/${range}?deviceNum=${deviceNum}`);
                xhr.send();
            }

            function makeDatePickerInvisible() {
                document.getElementById('customRange').style.visibility = 'hidden';
            }

            function customizeDateRange() {
                document.getElementById('customRange').style.visibility = 'visible';

                document.getElementById(currentClickedElement).style.color = 'LightGrey';
                currentClickedElement = 'customized';
                document.getElementById(currentClickedElement).style.color = 'Black';
            }

            function initPage() {
                currentClickedElement = '1day';
                document.getElementById('5hours').onclick = draw_5hourData;
                document.getElementById('12hours').onclick = draw_12hourData;
                document.getElementById('1day').onclick = draw_1dayData;
                document.getElementById('1week').onclick = draw_1weekData;
                document.getElementById('1month').onclick = draw_1monthData;
                document.getElementById('customized').onclick = customizeDateRange;

                $(function () {
                    $('#datePicker').daterangepicker({
                        opens: 'center',
                        autoApply: true,
                        maxDate: moment()
                    }, function (start, end, label) {
                        console.log("A new date selection was made: " + start.format('YYYY-MM-DD') + ' to ' + end.format('YYYY-MM-DD'));
                    });
                });

                document.getElementById('1day').click();
            }

            /**
             * This function draws the graph by using the google line chart api.
             */
            function drawChart(data, num) {
                let array = makeValidDataForm(data, num);

                let temperatureData = google.visualization.arrayToDataTable(array[0]);
                let humidityData = google.visualization.arrayToDataTable(array[1]);

                //required options for the temperature graph
                let temperatureOptions = {
                    title: 'temperature graph',
                    curveType: 'function',
                    legend: {position: 'none'},
                    hAxis : { textPosition: 'none' },
                    colors: ['red']
                };

                let humidityOptions = {
                    title: 'humidity graph',
                    curveType: 'function',
                    legend: {position: 'none'},
                    hAxis: { textPosition: 'none' },
                    colors: ['blue']
                }

                let temperatureContainer = document.getElementById('temperatureContent');
                let humidityContainer = document.getElementById('humidityContent');

                var tempChart = new google.visualization.LineChart(temperatureContainer);
                var humiChart = new google.visualization.LineChart(humidityContainer);

                tempChart.draw(temperatureData, temperatureOptions);
                humiChart.draw(humidityData, humidityOptions);
            }

            /**
             * This function selects the valid data from the given data set.
             */
            function makeValidDataForm(data, num) {
                let tempArray = [['date time', 'temperature']];
                let humiArray = [['date time', 'humidity']];
                let i, temp, humidity, date;

                let maxTemp, minTemp, tempSum, count, maxHumi, minHumi, humiSum;

                maxTemp = minTemp = data[0].temperature;
                maxHumi = minHumi = data[0].humidity;

                tempSum = 0;
                humiSum = 0;

                count = 0;

                let init = data.length - num;
                let last = data.length;

                //iterates the given data set, and appends the valid data to the graph data list.
                for (i = init; i < last; i++) {
                    date = new Date(Date.parse(data[i].timestamp));

                    temp = [];
                    humidity = [];

                    let currDate = date.toString();
                    temp.push(currDate);
                    temp.push(data[i].temperature);

                    humidity.push(currDate);
                    humidity.push(data[i].humidity);

                    if (maxTemp < data[i].temperature) { //check if the current temperature is the highest one
                        maxTemp = data[i].temperature;
                    }

                    if (minTemp > data[i].temperature) { //check if the current temperature is the lowest one
                        minTemp = data[i].temperature;
                    }

                    if (maxHumi < data[i].humidity) {
                        maxHumi = data[i].humidity;
                    }

                    if (minHumi > data[i].humidity) {
                        minHumi = data[i].humidity;
                    }

                    tempSum += data[i].temperature;
                    humiSum += data[i].humidity;

                    tempArray.push(temp);
                    humiArray.push(humidity);

                    count += 1;
                }

                let array = [];
                array.push(tempArray);
                array.push(humiArray);

                document.getElementById('tempMax').innerText = maxTemp.toString() + '℃';
                document.getElementById('tempMin').innerText = minTemp.toString() + '℃';
                document.getElementById('tempAvg').innerText = (tempSum / count).toFixed(2).toString() + '℃';

                document.getElementById('humidityMax').innerText = maxHumi.toString() + '%';
                document.getElementById('humidityMin').innerText = minHumi.toString() + '%';
                document.getElementById('humidityAvg').innerText = (humiSum / count).toFixed(2).toString() + '%';

                return array; //return the list that contains the data to draw the graph.
            }
        header(id='navigate_bar', class='navigate_bar')
            .navbarContainer
                nav(class='navbar navbar-light')
                    .navbar-collapse(id='header_navigator')
                        ul(class='navbar-nav')
                            li(class='nav-item')
                                button(class='goBackButton', id='goBackButton', title='go back to the previous page', onclick='window.history.back()')
                                    img(src='../public/images/goBack.svg', id='goBack_image')
                            li(class='nav-item')
                                a(class='nav-link', href='/', title='go to homepage', id='homeButton')
                                    img(src='../public/images/home.svg', id='home_link_image')
        .userInfoContainer(id='container')
            h1 User: #{user}
            h2 Device: #{deviceNum}
        .data
            .grp_nav
                .navListDiv
                    ul(class='graph_navigator_list')
                        li(class='nav_tab')
                            a(href='javascript:;', id='5hours', class='dateRangeLink') 5시간
                        li(class='nav_tab')
                            a(href='javascript:;', id='12hours', class='dateRangeLink') 12시간
                        li(class='nav_tab')
                            a(href='javascript:;', id='1day', class='dateRangeLink') 1일
                        li(class='nav_tab')
                            a(href='javascript:;', id='1week', class='dateRangeLink') 1주일
                        li(class='nav_tab')
                            a(href='javascript:;', id='1month', class='dateRangeLink') 1달
                        li(class='nav_tab')
                            a(href='javascript:;', id='customized', class='dateRangeLink') 사용자 지정
                .customDateRange(id='customRange')
                    script.
                        function replaceDateFormat(str, searchString, replaceString) {
                            str = str.split(searchString);
                            return str[2] + replaceString + str[0] + replaceString + str[1];
                        }

                        function getTheCustomDateData() {
                            let xhr = new XMLHttpRequest();

                            let start;
                            let end;

                            xhr.onreadystatechange = function () {
                                if (xhr.readyState === xhr.DONE) {
                                    if (xhr.status === 200) {
                                        let tempData = JSON.parse(xhr.response);
                                        if (tempData.length > 0) {
                                            drawChart(tempData, tempData.length);
                                        } else {
                                            alert(`No collected data : ${start} ~ ${end}`);
                                        }
                                    } else {
                                        alert('Failed to get the data from the server!');
                                    }
                                }
                            }

                            let dateRange = document.getElementById('datePicker').value;
                            let dateArray = dateRange.split(' - ');
                            let deviceNum = window.location.href.split('deviceNum=')[1].split('&')[0];
                            start = replaceDateFormat(dateArray[0], '/', '-');
                            end = replaceDateFormat(dateArray[1], '/', '-');

                            xhr.open('GET', `/data/custom?deviceNum=${deviceNum}&start=${start}&end=${end}`);
                            xhr.setRequestHeader('Content-Type', 'application/json');
                            xhr.send();
                        }
                    form
                        input(id='datePicker', name='dateRangeStart', type='text', readonly='readonly')
                        button(type='button', id='customDateButton', onclick='getTheCustomDateData()') OK
            .grp
                .temperature
                    .content
                        .dataContent(id='temperatureContent')
                    .values
                        .temperatureData
                            center
                                img(class='dataImg', id='temperatureImg', src='../public/images/if_temperature_354242.svg')
                                .dataValue
                                    p Max (℃)
                                    p(class='valueParagraph', id='tempMax')
                                    p Min (℃)
                                    p(class='valueParagraph', id='tempMin')
                                    p Avg (℃)
                                    p(class='valueParagraph', id='tempAvg')
                .humidity
                    .content
                        .dataContent(id='humidityContent')
                    .values
                        .humidityData
                            center
                                img(class='dataImg' id='humidityImg', src='../public/images/if_weather_44_2682807.png')
                                .dataValue
                                    p Max (%)
                                    p(class='valueParagraph', id='humidityMax')
                                    p Min (%)
                                    p(class='valueParagraph', id='humidityMin')
                                    p Avg (%)
                                    p(class='valueParagraph', id='humidityAvg')