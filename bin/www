#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var apps = require('../app');

var debug = require('debug')('datathingserver:server');
var http = require('http');
var https = require('https');

var fs = require('fs');

const httpPort = 8080; //use the 8080 http port number
const httpsPort = 8443; //use the default https port number

app.set('port', httpPort);
apps.set('port', httpsPort);


/**
 * Certification option for the https protocol
 */

var options = {//TODO fill the options
    cert: fs.readFileSync("../gfcert.pem"),
    key: fs.readFileSync("../gfselfsigned.key")
};


/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var servers = https.createServer(options, apps);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(httpPort);
server.on('error', onError);
server.on('listening', onListening);

servers.listen(httpsPort);
servers.on('error', onError);
servers.on('listening', onListening);



/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string'
    ? 'Pipe ' + httpPort
    : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
